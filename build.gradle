buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.9'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

ext.versions = [
        springBootVersion:'1.5.8.RELEASE',
        springTxVersion:'4.3.12.RELEASE'
]

ext.libraries = [
        spring_boot_starter: dependencies.create("org.springframework.boot:spring-boot-starter:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_boot_starter_log4j2: dependencies.create("org.springframework.boot:spring-boot-starter-log4j2:" + ext.versions.springBootVersion),
        spring_boot_starter_security: dependencies.create("org.springframework.boot:spring-boot-starter-security:" + ext.versions.springBootVersion) {
            exclude module: "logback-classic"
            force = true
        },
        spring_boot_starter_data_jpa: dependencies.create("org.springframework.boot:spring-boot-starter-data-jpa:" + ext.versions.springBootVersion) {
            exclude module: "logback-classic"
            force = true
        },
        spring_boot_starter_data_rest: dependencies.create("org.springframework.boot:spring-boot-starter-data-rest:" + ext.versions.springBootVersion) {
            exclude module: "logback-classic"
            force = true
        },
        spring_boot_starter_mobile: dependencies.create("org.springframework.boot:spring-boot-starter-mobile:" + ext.versions.springBootVersion) {
            exclude module: "logback-classic"
            force = true
        },
        spring_tx: dependencies.create("org.springframework:spring-tx:" + ext.versions.springTxVersion),
        jjwt: dependencies.create("io.jsonwebtoken:jjwt:0.9.0"),
        google_guava: dependencies.create("com.google.guava:guava:23.0"),
        google_gson: dependencies.create("com.google.code.gson:gson:2.8.2"),
        h2: dependencies.create("com.h2database:h2:1.4.196"),

        junit: dependencies.create("junit:junit:4.12"),
        powermock_junit: dependencies.create("org.powermock:powermock-module-junit4:1.7.3"),
        powermock_api_easymock: dependencies.create("org.powermock:powermock-api-easymock:1.7.3"),
        easymock: dependencies.create("org.easymock:easymock:3.5") {
            exclude module: "cglib-nodep"
            force = true
        },
        objenesis: dependencies.create("org.objenesis:objenesis:2.6"),
        cglib_nodep: dependencies.create("cglib:cglib-nodep:3.2.5"),
        spring_boot_starter_test: dependencies.create("org.springframework.boot:spring-boot-starter-test:" + ext.versions.springBootVersion),
        spring_security_test: dependencies.create("org.springframework.security:spring-security-test:4.2.3.RELEASE")
]

allprojects {

    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven'

    group = 'com.gazbert.bxbot'
        version = '0.0.1-SNAPSHOT'
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    javadoc {
        include "**/api/**"
    }
}

// TODO strip out common stuff into separate method?
task buildZipDist(type: Zip, dependsOn: build) {

    baseName = 'bxbot-ui-server-app'

    into("$baseName-$version") {

        into('libs') {
            from 'bxbot-ui-server-app/build/libs'
            include '*.jar' //copy the fat jar created by bootRepackage
        }

        into('') {
            from 'README.md'
        }

        into('') {
            from 'CONTRIBUTING.md'
        }

        into('') {
            from 'LICENSE'
        }

        into('') {
            from 'third_party_licenses.txt'
        }

        into('') {
            from 'MAINTAINERS.txt'
        }

        into('') {
            from 'bxbot.sh'
        }

        into('') {
            from 'bxbot.bat'
        }

        from('config/application.properties') {
            into 'config'
        }

        into('config') {
            from 'config'
            include('*.xml')
        }
    }
}

// TODO strip out common stuff into separate method?
task buildTarGzipDist(type: Tar, dependsOn: build) {

    baseName = 'bxbot-ui-server-app'
    extension = 'tar.gz'
    compression = Compression.GZIP

    into("$baseName-$version") {

        into('libs') {
            from 'bxbot-ui-server-app/build/libs'
            include '*.jar' //copy the fat jar created by bootRepackage
        }

        into('') {
            from 'README.md'
        }

        into('') {
            from 'CONTRIBUTING.md'
        }

        into('') {
            from 'LICENSE'
        }

        into('') {
            from 'third_party_licenses.txt'
        }

        into('') {
            from 'MAINTAINERS.txt'
        }

        into('') {
            from 'bxbot.sh'
        }

        into('') {
            from 'bxbot.bat'
        }

        from('config/application.properties') {
            into 'config'
        }

        into('config') {
            from 'config'
            include('*.xml')
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.2.1'
    }
}